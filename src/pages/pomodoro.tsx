/* eslint-disable @next/next/no-page-custom-font */

import React, { useCallback, useRef } from 'react'
import type { NextPage } from 'next'
import { Container, ContainerIndex } from 'src/components/design/container'
import Head from 'next/head'
import Header from 'src/components/Header'
import Menu from 'src/components/Menu'
import * as S from 'src/style/pomodoro/style'
import { AiFillSetting } from 'react-icons/ai'
import { useState } from 'react'
import TimerComponent from 'src/components/TimerComponent'
import { IoAlertCircleSharp } from 'react-icons/io5'

const Pomodoro: NextPage = () => {
  const inputMinRef = useRef<HTMLInputElement>(null)
  const inputCicleRef = useRef<HTMLInputElement>(null)
  const inputRestRef = useRef<HTMLInputElement>(null)

  const [min, setMin] = useState(0)
  const [cicle, setCicle] = useState(0)
  const [rest, setRest] = useState(0)

  const [modal, setModal] = useState(false)

  const showModal = useCallback((value: boolean) => {
    setModal(value)
  }, [])

  return (
    <Container>
      <Head>
        <title>Boost yourself</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          href="https://fonts.googleapis.com/css2?family=Rye&display=swap"
          rel="stylesheet"
        />
        <link
          href="https://fonts.googleapis.com/css2?family=Roboto:wght@100&display=swap"
          rel="stylesheet"
        />
      </Head>

      <ContainerIndex>
        <Header />
        <S.ContainerContent>
          <TimerComponent
            timer={min}
            modal={showModal}
            cycle={cicle}
            rest={rest}
          />

          <S.SettingTimer>
            <header>
              <h2>Configurações</h2>
              <AiFillSetting />
            </header>

            <div>
              <label htmlFor="ipt-time">Quantos minutos por ciclo: </label>
              <S.Input type="number" id="ipt-time" ref={inputMinRef} />
              <span>min</span>
            </div>

            <div>
              <label htmlFor="ipt-ciclo">Quantidade de ciclos: </label>
              <S.Input type="number" id="ipt-ciclo" ref={inputCicleRef} />
              <span>ciclos</span>
            </div>

            <div>
              <label htmlFor="ipt-ciclo">Tempo de descanso: </label>
              <S.Input type="number" id="ipt-ciclo" ref={inputRestRef} />
              <span>min</span>
            </div>

            <S.ButtonPlay
              type="submit"
              onClick={() => {
                setMin(Number(inputMinRef.current?.value) * 60)
                setCicle(Number(inputCicleRef.current?.value))
                setRest(Number(inputRestRef.current?.value) * 60)
              }}
            >
              Enviar
            </S.ButtonPlay>
            {modal ? (
              <S.Modal>
                <div>
                  <IoAlertCircleSharp />
                  <p>Para acessar novamente, pause o cronômetro</p>
                </div>
              </S.Modal>
            ) : (
              <></>
            )}
          </S.SettingTimer>
        </S.ContainerContent>
      </ContainerIndex>
      <Menu />
    </Container>
  )
}

export default Pomodoro
